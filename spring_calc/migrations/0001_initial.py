# Generated by Django 5.1.7 on 2025-04-15 18:39

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='GearCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('top_speed_mph', models.IntegerField(default=180, help_text='Top speed on straight in mph', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(350)])),
                ('min_corner_speed_mph', models.IntegerField(default=60, help_text='Minimum corner speed in mph', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(120)])),
                ('tire_diameter_inches', models.FloatField(blank=True, help_text='Tire diameter in inches', null=True, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(35)])),
                ('min_corner_gear', models.IntegerField(choices=[(1, '1st Gear'), (2, '2nd Gear'), (3, '3rd Gear'), (4, '4th Gear')], default=1, help_text='Minimum corner gear')),
                ('min_rpm', models.IntegerField(default=1000, help_text='Minimum engine RPM', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(3000)])),
                ('max_rpm', models.IntegerField(default=8000, help_text='Maximum engine RPM', validators=[django.core.validators.MinValueValidator(3000), django.core.validators.MaxValueValidator(18000)])),
                ('power_hp', models.IntegerField(default=500, help_text='Engine power in HP', validators=[django.core.validators.MinValueValidator(2), django.core.validators.MaxValueValidator(5000)])),
                ('max_power_rpm', models.IntegerField(default=6500, help_text='RPM at maximum power', validators=[django.core.validators.MinValueValidator(3000), django.core.validators.MaxValueValidator(18000)])),
                ('torque_kgfm', models.FloatField(default=50.0, help_text='Engine torque in kg-fm', validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(500.0)])),
                ('num_gears', models.IntegerField(default=6, help_text='Number of gears', validators=[django.core.validators.MinValueValidator(4), django.core.validators.MaxValueValidator(9)])),
                ('final_drive', models.FloatField(default=3.7, help_text='Final drive ratio', validators=[django.core.validators.MinValueValidator(2.0), django.core.validators.MaxValueValidator(6.0)])),
                ('gear_ratios', models.JSONField(blank=True, default=dict, null=True)),
                ('torque_curve', models.JSONField(blank=True, default=list, help_text='Torque curve data as array of [rpm, torque] pairs', null=True)),
                ('top_speed_calculated', models.FloatField(blank=True, help_text='Calculated top speed in mph', null=True)),
                ('acceleration_estimate', models.FloatField(blank=True, help_text='Estimated 0-60 time in seconds', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TireSizeCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('speed', models.FloatField(help_text='Vehicle speed in km/h', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(500)])),
                ('rpm', models.IntegerField(help_text='Engine RPM', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(12000)])),
                ('gear_ratio', models.FloatField(help_text='Current gear ratio', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(5.0)])),
                ('final_drive', models.FloatField(help_text='Final drive ratio', validators=[django.core.validators.MinValueValidator(2.0), django.core.validators.MaxValueValidator(6.0)])),
                ('tire_size', models.FloatField(blank=True, help_text='Calculated tire size in inches', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['created_at'], name='spring_calc_created_d1cc34_idx')],
            },
        ),
        migrations.CreateModel(
            name='SpringCalculation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('performance_points', models.FloatField(blank=True, help_text='Performance Points (PP)', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(9999.99)])),
                ('front_tires', models.CharField(choices=[('CH', 'Comfort: Hard'), ('CM', 'Comfort: Medium'), ('CS', 'Comfort: Soft'), ('SH', 'Sport: Hard'), ('SM', 'Sport: Medium'), ('SS', 'Sport: Soft'), ('RH', 'Racing: Hard'), ('RM', 'Racing: Medium'), ('RS', 'Racing: Soft'), ('RI', 'Racing: Intermediate'), ('RW', 'Racing: Heavy Wet')], default='RM', help_text='Front tire type', max_length=2)),
                ('rear_tires', models.CharField(choices=[('CH', 'Comfort: Hard'), ('CM', 'Comfort: Medium'), ('CS', 'Comfort: Soft'), ('SH', 'Sport: Hard'), ('SM', 'Sport: Medium'), ('SS', 'Sport: Soft'), ('RH', 'Racing: Hard'), ('RM', 'Racing: Medium'), ('RS', 'Racing: Soft'), ('RI', 'Racing: Intermediate'), ('RW', 'Racing: Heavy Wet')], default='RM', help_text='Rear tire type', max_length=2)),
                ('arb_stiffness_multiplier', models.FloatField(default=1.0, help_text='ARB Stiffness multiplier', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('vehicle_weight', models.IntegerField(default=1400, help_text='Vehicle weight in kg', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(5000)])),
                ('front_weight_distribution', models.FloatField(default=50, help_text='Front weight distribution (%)', validators=[django.core.validators.MinValueValidator(25), django.core.validators.MaxValueValidator(75)])),
                ('front_ride_height', models.IntegerField(default=100, help_text='Front ride height in mm', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(200)])),
                ('rear_ride_height', models.IntegerField(default=100, help_text='Rear ride height in mm', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(200)])),
                ('front_downforce', models.IntegerField(default=0, help_text='Front downforce', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5000)])),
                ('rear_downforce', models.IntegerField(default=0, help_text='Rear downforce', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10000)])),
                ('track_type', models.CharField(choices=[('Fast', 'Fast Track'), ('Technical', 'Technical Track')], default='Fast', max_length=20)),
                ('tire_wear_multiplier', models.IntegerField(default=25, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50)])),
                ('high_speed_stability', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('low_speed_stability', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(-1.0), django.core.validators.MaxValueValidator(1.0)])),
                ('rotational_g_40mph', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9.0)])),
                ('rotational_g_75mph', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9.0)])),
                ('rotational_g_150mph', models.FloatField(default=0.0, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(9.0)])),
                ('roll_bar_multiplier', models.FloatField(default=1.0, validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('base_camber', models.FloatField(default=0.0)),
                ('stiffness_multiplier', models.FloatField(default=1.0, help_text='Stiffness multiplier', validators=[django.core.validators.MinValueValidator(0.5), django.core.validators.MaxValueValidator(2.0)])),
                ('spring_frequency_offset', models.IntegerField(default=0, help_text='Spring frequency offset (-5 to 6)', validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(6)])),
                ('ou_adjustment', models.IntegerField(default=0, help_text='Oversteer/Understeer adjustment (-5 to 5)', validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(5)])),
                ('corner_entry_adjustment', models.IntegerField(default=0, help_text='Corner entry adjustment (-5 to 5)', validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(5)])),
                ('corner_exit_adjustment', models.IntegerField(default=0, help_text='Corner exit adjustment (-5 to 5)', validators=[django.core.validators.MinValueValidator(-5), django.core.validators.MaxValueValidator(5)])),
                ('front_spring_rate', models.FloatField(blank=True, help_text='Calculated front spring rate (N/mm)', null=True)),
                ('rear_spring_rate', models.FloatField(blank=True, help_text='Calculated rear spring rate (N/mm)', null=True)),
                ('front_spring_frequency', models.FloatField(blank=True, help_text='Front spring frequency (Hz)', null=True)),
                ('rear_spring_frequency', models.FloatField(blank=True, help_text='Rear spring frequency (Hz)', null=True)),
                ('front_roll_bar', models.FloatField(blank=True, null=True)),
                ('rear_roll_bar', models.FloatField(blank=True, null=True)),
                ('front_camber', models.FloatField(blank=True, null=True)),
                ('rear_camber', models.FloatField(blank=True, null=True)),
                ('front_toe', models.FloatField(blank=True, null=True)),
                ('rear_toe', models.FloatField(blank=True, null=True)),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spring_calc.vehicle')),
            ],
        ),
        migrations.CreateModel(
            name='SavedSetup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Setup name', max_length=100)),
                ('date_saved', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('gear_calculation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='saved_setups', to='spring_calc.gearcalculation')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='saved_setups', to=settings.AUTH_USER_MODEL)),
                ('spring_calculation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='saved_setups', to='spring_calc.springcalculation')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='setups', to='spring_calc.vehicle')),
            ],
            options={
                'ordering': ['-date_saved'],
            },
        ),
        migrations.AddField(
            model_name='gearcalculation',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='spring_calc.vehicle'),
        ),
        migrations.AddIndex(
            model_name='springcalculation',
            index=models.Index(fields=['vehicle'], name='spring_calc_vehicle_48a6a6_idx'),
        ),
        migrations.AddIndex(
            model_name='springcalculation',
            index=models.Index(fields=['created_at'], name='spring_calc_created_659216_idx'),
        ),
        migrations.AddIndex(
            model_name='savedsetup',
            index=models.Index(fields=['vehicle'], name='spring_calc_vehicle_ba6496_idx'),
        ),
        migrations.AddIndex(
            model_name='savedsetup',
            index=models.Index(fields=['date_saved'], name='spring_calc_date_sa_b8336c_idx'),
        ),
        migrations.AddIndex(
            model_name='savedsetup',
            index=models.Index(fields=['user'], name='spring_calc_user_id_0f3c07_idx'),
        ),
        migrations.AddIndex(
            model_name='gearcalculation',
            index=models.Index(fields=['vehicle'], name='spring_calc_vehicle_37c6ec_idx'),
        ),
        migrations.AddIndex(
            model_name='gearcalculation',
            index=models.Index(fields=['created_at'], name='spring_calc_created_643f5e_idx'),
        ),
    ]
